/* tslint:disable */
/* eslint-disable */
/**
 * OptiPrism JS SDK
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@optiprism.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  IdentifyEventRequest,
  TrackEventRequest,
} from '../models/index';

export interface IdentifyEventOperationRequest {
    projectToken: string;
    identifyEventRequest: IdentifyEventRequest;
}

export interface TrackEventOperationRequest {
    projectToken: string;
    trackEventRequest: TrackEventRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Identify event
     */
    async identifyEventRaw(requestParameters: IdentifyEventOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectToken'] == null) {
            throw new runtime.RequiredError(
                'projectToken',
                'Required parameter "projectToken" was null or undefined when calling identifyEvent().'
            );
        }

        if (requestParameters['identifyEventRequest'] == null) {
            throw new runtime.RequiredError(
                'identifyEventRequest',
                'Required parameter "identifyEventRequest" was null or undefined when calling identifyEvent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/ingest/{projectToken}/identify`.replace(`{${"projectToken"}}`, encodeURIComponent(String(requestParameters['projectToken']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['identifyEventRequest'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Identify event
     */
    async identifyEvent(requestParameters: IdentifyEventOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.identifyEventRaw(requestParameters, initOverrides);
    }

    /**
     * Track event
     */
    async trackEventRaw(requestParameters: TrackEventOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['projectToken'] == null) {
            throw new runtime.RequiredError(
                'projectToken',
                'Required parameter "projectToken" was null or undefined when calling trackEvent().'
            );
        }

        if (requestParameters['trackEventRequest'] == null) {
            throw new runtime.RequiredError(
                'trackEventRequest',
                'Required parameter "trackEventRequest" was null or undefined when calling trackEvent().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/ingest/{projectToken}/track`.replace(`{${"projectToken"}}`, encodeURIComponent(String(requestParameters['projectToken']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['trackEventRequest'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Track event
     */
    async trackEvent(requestParameters: TrackEventOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.trackEventRaw(requestParameters, initOverrides);
    }

}
